install.packages("NlsyLinks")
library(NlsyLinks)
raw1980intelligence <- read.csv(paste(file_drive,"/Dropbox/SAS/MyFolders/79/SASGen1/raw1980intelligence.csv",sep=""))
coding_speed <- read.csv(paste(file_drive,"/Dropbox/SAS/MyFolders/79/SASGen1/coding_speed.csv",sep=""))
`H40` <- read.csv(paste(file_drive,"/Dropbox/Work/Research/Projects/NLSY/Not Current/difference scores and health/year1project/H40.csv",sep=""))
\documentclass[xcolor=x11names,compress]{beamer}
%% General document %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage{graphicx}\graphicspath{{graphics/}}
\usepackage{tikz}
\usetikzlibrary{decorations.fractals,calc,arrows,positioning}
%\usepackage[first=-30, last=30]{lcg}
\usepackage{apacite}
\usepackage{natbib}
\usepackage{wrapfig}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Beamer Layout %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\useoutertheme[subsection=false,shadow]{miniframes}
\useinnertheme{default}
\usefonttheme{serif}
\usepackage{palatino}
\setbeamerfont{title like}{shape=\scshape}
\setbeamerfont{frametitle}{shape=\scshape}
\setbeamercolor*{lower separation line head}{bg=DeepSkyBlue4}
\setbeamercolor*{normal text}{fg=black,bg=white}
\setbeamercolor*{alerted text}{fg=red}
\setbeamercolor*{example text}{fg=black}
\setbeamercolor*{structure}{fg=black}
\setbeamercolor*{palette tertiary}{fg=black,bg=black!10}
\setbeamercolor*{palette quaternary}{fg=black,bg=black!10}
\renewcommand{\(}{\begin{columns}}
\renewcommand{\)}{\end{columns}}
\newcommand{\<}[1]{\begin{column}{#1}}
\renewcommand{\>}{\end{column}}
%% New Commands %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand*{\RandomShape}[1][DeepSkyBlue4]{
\begin{tikzpicture}[decoration=Koch curve type 2]
\pgfmathsetmacro{\Xa}{rand*2}
\pgfmathsetmacro{\Xb}{rand*2}
\pgfmathsetmacro{\y}{random*2}
\pgfmathsetmacro{\ya}{1-\y}
\pgfmathsetmacro{\yb}{2+\y}
\draw[#1] decorate{ decorate{ decorate{ (\ya,\Xb) -- (\yb,\Xa) }}};
\end{tikzpicture}
}
\pgfmathsetseed{\number\pdfrandomseed}
\makeatletter
\def\pgfcurrentseed{%
\pgfmathparse{\pgfmath@rnd@z}\pgfmathresult%
}
\makeatother
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}
<<setup, include=FALSE>>=
#Orgainzation
file_drive= "C:/"
#file_drive="E:"
directory="Dropbox/Work/Templates/Sweave/Talk/"; setwd(paste0(file_drive,directory))
directory<-getwd()
content_folder = paste0(directory,"/content/")
data_folder = paste0(content_folder,"data/")
graphics_folder = paste0(directory,"graphics/")
mplus_folder = paste0(content_folder,"mplusautomation/")
tables_folder = paste0(content_folder,"tables/")
slides_folder = paste0(content_folder,"slides/")
#LIBRARIES
library(knitr)
library(ggplot2)
library(effects)
library(stargazer)
library(psych)
library(xtable)
library(plyr)
library(stringr)
#FUNCTIONS
source(paste0(file_drive,"Dropbox/Work/Templates/R/Functions/Mason_Functions.R"))
@
<<data, include=FALSE>>=
#############
library(NlsyLinks)
raw1980intelligence <- read.csv(paste(file_drive,"/Dropbox/SAS/MyFolders/79/SASGen1/raw1980intelligence.csv",sep=""))
coding_speed <- read.csv(paste(file_drive,"/Dropbox/SAS/MyFolders/79/SASGen1/coding_speed.csv",sep=""))
`H40` <- read.csv(paste(file_drive,"/Dropbox/Work/Research/Projects/NLSY/Not Current/difference scores and health/year1project/H40.csv",sep=""))
#`H50` <- read.csv(paste(file_drive,"/Dropbox/Work/Research/Projects/NLSY/difference scores and health/year1project/H50.csv",sep=""))
raw1980intelligence$raw[raw1980intelligence$raw < 0] <- NA
raw1980intelligence$rawintelligence<-raw1980intelligence$raw
raw1980intelligence$raw <- NULL
raw1980intelligence$zintelligence<- scale(raw1980intelligence$rawintelligence, center = TRUE, scale = TRUE)
coding_speed$rawcodingspeed <- coding_speed$ASVAB.8
coding_speed$rawcodingspeed[coding_speed$rawcodingspeed < 0] <- NA
coding_speed$ASVAB.8 <- NULL
coding_speed$zcodingspeed<- scale(coding_speed$rawcodingspeed, center = TRUE, scale = TRUE)
attach(H40)
PCS_40<-H40.SF12_PCS_SCORE
PCS_40[PCS_40 < 0] <- NA
detach(H40)
#attach(H50)
#PCS_50<-H50.SF12_PCS_SCORE
#PCS_50[PCS_50 < 0] <- NA
#detach(H50)
m1 <- lm(raw1980intelligence$rawintelligence ~ coding_speed$rawcodingspeed)
m2 <- lm(coding_speed$rawcodingspeed ~ raw1980intelligence$rawintelligence)
Intercept_IcC<-(summary(m1)$coefficients[1])
Intercept_CcI<-(summary(m2)$coefficients[1])
Beta_IcC<-(summary(m1)$coefficients[2])
Beta_CcI<-(summary(m2)$coefficients[2])
CodingcIntel <- coding_speed$rawcodingspeed-Intercept_CcI-Beta_CcI*raw1980intelligence$rawintelligence
IntelcCoding <- (raw1980intelligence$rawintelligence-Intercept_IcC)-(Beta_IcC*coding_speed$rawcodingspeed)
OverlapC <- Beta_CcI*raw1980intelligence$rawintelligence
OverlapI <- Beta_IcC*coding_speed$rawcodingspeed
cor(OverlapC,OverlapI, use="pairwise.complete.obs")
attach(H40)
#Blood_Pressure <-H40.CHRC.1
#Blood_Pressure[Blood_Pressure < 0] <- NA
#Diabetes <-H40.CHRC.2
#Diabetes[Diabetes < 0] <- NA
#EyeTrouble<-H40.CHRC.10Q
#EyeTrouble[EyeTrouble < 0] <- NA
SelfHealth<-H40.SF12.2
SelfHealth[SelfHealth < 0] <- NA
SelfHealth_Deary<-H40.SF12.2
SelfHealth_Deary[SelfHealth_Deary < 0] <- NA
SelfHealth_Deary[SelfHealth_Deary == 1] <- 0
SelfHealth_Deary[SelfHealth_Deary == 2] <- 0
SelfHealth_Deary[SelfHealth_Deary == 3] <- 0
SelfHealth_Deary[SelfHealth_Deary == 4] <- 1
SelfHealth_Deary[SelfHealth_Deary == 5] <- 1
detach(H40)
##########DATAFRAMES
raw.data<- data.frame(coding_speed,raw1980intelligence)
controlled.data<-data.frame(coding_speed,IntelcCoding,CodingcIntel)
combined.data<-data.frame(OverlapI,OverlapC,SelfHealth_Deary,SelfHealth,#Diabetes,EyeTrouble,Blood_Pressure,
coding_speed,IntelcCoding,CodingcIntel,raw.data,PCS_40#,PCS_50
)
##########DIFF Scores##########
library(NlsyLinks) #Load the package into the current R session.
dsOutcomes <- combined.data
#dsOutcomes$SubjectTag <- CreateSubjectTag(subjectID=dsOutcomes$SubjectID,
#generation=dsOutcomes$Generation)
dsLinks <- Links79Pair
dsLinks <- dsLinks[dsLinks$RelationshipPath=='Gen1Housemates', ] #Only Gen1 Sibs (ie, NLSY79)
dsDF <- CreatePairLinksDoubleEntered(outcomeDataset=dsOutcomes, linksPairDataset=dsLinks,
outcomeNames=c("OverlapI","OverlapC", "SelfHealth_Deary", "SelfHealth",#"EyeTrouble","Blood_Pressure","Diabetes",
"rawintelligence", "rawcodingspeed", "CodingcIntel", "IntelcCoding", "PCS_40"#, "PCS_50"
))
attach(dsDF)
#diffBlood_Pressure<-(Blood_Pressure_S1-Blood_Pressure_S2)
diffOverlapI<-(OverlapI_S1-OverlapI_S2)
diffOverlapC<-(OverlapC_S1-OverlapC_S2)
diffOverlapAv<-(.5*(OverlapI_S1+OverlapC_S1)-.5*(OverlapI_S2+OverlapC_S2))
meanOverlapI<-(OverlapI_S1+OverlapI_S2)*.5
meanOverlapC<-(OverlapC_S1+OverlapC_S2)*.5
meanOverlapAv<-(.25*(OverlapI_S1+OverlapC_S1)+.25*(OverlapI_S2+OverlapC_S2))
diffSelfHealth_Deary<-(SelfHealth_Deary_S1-SelfHealth_Deary_S2)
diffSelfHealth<-(SelfHealth_S1-SelfHealth_S2)
#diffEyeTrouble<-(EyeTrouble_S1-EyeTrouble_S2)
#diffDiabetes<-Diabetes_S1-Diabetes_S2
meanSelfHealth<- SelfHealth_S1*.5 +.5*SelfHealth_S2
rankdiffSelfHealth<-rank(-diffSelfHealth)
s1geSelfHealth<-(diffSelfHealth)
s1geSelfHealth[s1geSelfHealth >=0] <- 1
s1geSelfHealth[s1geSelfHealth< 0] <- 0
#diffPCS_40<- PCS_40_S1 - PCS_40_S2
#diffPCS_50<- PCS_50_S1 - PCS_50_S2
diffrawcodingspeed<- rawcodingspeed_S1 - rawcodingspeed_S2
rankdiffrawcodingspeed<-rank(-diffrawcodingspeed)
diffrawintelligence<- rawintelligence_S1 - rawintelligence_S2
rankdiffrawintelligence<-rank(-diffrawintelligence)
diffCodingcIntel<- CodingcIntel_S1 - CodingcIntel_S2
rankdiffCodingcIntel<-rank(-diffCodingcIntel)
diffIntelcCoding<- IntelcCoding_S1 - IntelcCoding_S2
rankdiffIntelcCoding<-rank(-diffIntelcCoding)
meanrawcodingspeed<- rawcodingspeed_S1*.5 +.5*rawcodingspeed_S2
meanrawintelligence<- rawintelligence_S1*.5 +.5*rawintelligence_S2
meanCodingcIntel<- CodingcIntel_S1*.5 +.5*CodingcIntel_S2
meanIntelcCoding<- IntelcCoding_S1*.5 +.5*IntelcCoding_S2
s1gerawcodingspeed <- diffrawcodingspeed
s1gerawcodingspeed[s1gerawcodingspeed >=0] <- 1
s1gerawcodingspeed[s1gerawcodingspeed < 0] <- 0
s1gerawintelligence <- diffrawintelligence
s1gerawintelligence[s1gerawintelligence >=0] <- 1
s1gerawintelligence[s1gerawintelligence < 0] <- 0
s1geCodingcIntel <- diffCodingcIntel
s1geCodingcIntel[s1geCodingcIntel >=0] <- 1
s1geCodingcIntel[s1geCodingcIntel < 0] <- 0
s1geIntelcCoding <- diffIntelcCoding
s1geIntelcCoding[s1geIntelcCoding >=0] <- 1
s1geIntelcCoding[s1geIntelcCoding < 0] <- 0
megafull<- data.frame(diffOverlapI,diffOverlapC,diffOverlapAv,meanOverlapI,meanOverlapC,meanOverlapAv,dsDF,#diffBlood_Pressure,
rankdiffSelfHealth,meanSelfHealth, s1geSelfHealth,
diffSelfHealth_Deary,
diffSelfHealth,
#diffEyeTrouble,
#diffDiabetes,
#diffPCS_40,
#diffPCS_50,
meanrawcodingspeed,meanrawintelligence,
meanCodingcIntel,
meanIntelcCoding, diffrawcodingspeed,diffrawintelligence,rankdiffrawcodingspeed,rankdiffrawintelligence,rankdiffCodingcIntel,
diffCodingcIntel,diffIntelcCoding,s1gerawcodingspeed,rankdiffIntelcCoding,
s1gerawintelligence,s1geCodingcIntel, s1geIntelcCoding)
s1geSelfHealth_filtered<-megafull[megafull$s1geSelfHealth==1, ]
detach(dsDF)
###########
nlsyextract <- read.csv(paste(file_drive,"/Dropbox/Work/Research/Projects/NLSY/SPSP15/nlsyextract.csv",sep=""))
nlsyextract$IDC1[nlsyextract$IDC1 <= 0  ] <- 0
nlsyextract$IDC1[nlsyextract$IDC1 > 0  ] <- 1
nlsyextract$SiblinginSample <-nlsyextract$IDC1
nlsyextract$IDC1 <- NULL
nlsyextract[nlsyextract< 0  ] <- NA
nlsyextract$month<-nlsyextract$Q1.3_A.M
nlsyextract$month<- paste("0",nlsyextract$Q1.3_A.M,sep="")
nlsyextract$month[nlsyextract$month == 010 ] <- 10
nlsyextract$month[nlsyextract$month == 011 ] <- 11
nlsyextract$month[nlsyextract$month == 012 ] <- 12
nlsyextract$Age<-as.numeric(as.Date(as.character("2015-01-12"),format="%Y-%m-%d")-as.Date(paste("19",nlsyextract$Q1.3_A.Y,"-",nlsyextract$month,"-15",sep=""), format='%Y-%m-%d'))/364.25
summarystats<-data.frame(nlsyextract$SiblinginSample,nlsyextract$Age,raw.data$rawcodingspeed,raw.data$rawintelligence,SelfHealth)
library(tables)
library(Hmisc)
Mean <- function(x) base::mean(x, na.rm=TRUE)
Median <- function(x) stats::median(x, na.rm=TRUE)
Sd <- function(x) stats::sd(x, na.rm=TRUE)
Min <- function(x) base::min(x, na.rm=TRUE)
Max <- function(x) base::max(x, na.rm=TRUE)
Cor <- function(x) stats::cor(x, use = "pairwise.complete.obs")
m_c<-lm(  diffSelfHealth ~  meanrawcodingspeed + diffrawcodingspeed,data=s1geSelfHealth_filtered)
m_ch<-lm(  diffSelfHealth ~ meanSelfHealth + meanrawcodingspeed + diffrawcodingspeed,data=s1geSelfHealth_filtered)
m_ih<-lm(  diffSelfHealth ~ meanSelfHealth + meanrawintelligence + diffrawintelligence,data=s1geSelfHealth_filtered)
m_i<-lm(  diffSelfHealth ~ meanrawintelligence + diffrawintelligence,data=s1geSelfHealth_filtered)
m_ich <- lm( diffSelfHealth ~ meanrawintelligence + diffrawintelligence + meanrawcodingspeed + diffrawcodingspeed + meanSelfHealth,data=s1geSelfHealth_filtered)
m_ioch <- lm( diffSelfHealth ~ meanIntelcCoding + diffIntelcCoding + meanrawcodingspeed + diffrawcodingspeed + meanSelfHealth,data=s1geSelfHealth_filtered)
m_iocoh <- lm( diffSelfHealth ~ meanIntelcCoding + diffIntelcCoding + meanCodingcIntel + diffCodingcIntel + meanSelfHealth,data=s1geSelfHealth_filtered)
m_icoh <- lm( diffSelfHealth ~ meanrawintelligence + diffrawintelligence + meanCodingcIntel + diffCodingcIntel + meanSelfHealth,data=s1geSelfHealth_filtered)
m_mich <- lm( diffSelfHealth ~ meanOverlapAv + diffOverlapAv + meanSelfHealth,data=s1geSelfHealth_filtered)
attach(s1geSelfHealth_filtered)
d_ioch<- data.frame(ExtendedID)
d_ich<- data.frame(ExtendedID)
d_iocoh<- data.frame(ExtendedID)
d_ch<- data.frame(ExtendedID)
d_ih<- data.frame(ExtendedID)
d_mich<- data.frame(ExtendedID)
detach(s1geSelfHealth_filtered)
d_ioch$meanC<-scale(s1geSelfHealth_filtered$meanrawcodingspeed)
d_ioch$diffC<-scale(s1geSelfHealth_filtered$diffrawcodingspeed)
d_ioch$meanI<-scale(s1geSelfHealth_filtered$meanIntelcCoding)
d_ioch$diffI<-scale(s1geSelfHealth_filtered$diffIntelcCoding)
d_ioch$diffSelfHealth<-s1geSelfHealth_filtered$diffSelfHealth
d_ioch$meanSelfHealth<-scale(s1geSelfHealth_filtered$meanSelfHealth)
md_ioch <- lm( diffSelfHealth ~ meanC + diffC + meanI + diffI + meanSelfHealth,data=d_ioch )
d_iocoh$meanC<-scale(s1geSelfHealth_filtered$meanCodingcIntel)
d_iocoh$diffC<-scale(s1geSelfHealth_filtered$diffCodingcIntel)
d_iocoh$meanI<-scale(s1geSelfHealth_filtered$meanIntelcCoding)
d_iocoh$diffI<-scale(s1geSelfHealth_filtered$diffIntelcCoding)
d_iocoh$diffSelfHealth<-s1geSelfHealth_filtered$diffSelfHealth
d_iocoh$meanSelfHealth<-scale(s1geSelfHealth_filtered$meanSelfHealth)
md_iocoh <- lm( diffSelfHealth ~ meanC + diffC + meanI + diffI + meanSelfHealth,data=d_iocoh )
d_ch$meanC<-scale(s1geSelfHealth_filtered$meanrawcodingspeed)
d_ch$diffC<-scale(s1geSelfHealth_filtered$diffrawcodingspeed)
d_ch$diffSelfHealth<-s1geSelfHealth_filtered$diffSelfHealth
d_ch$meanSelfHealth<-scale(s1geSelfHealth_filtered$meanSelfHealth)
md_ch <- lm( diffSelfHealth ~ meanC + diffC + meanSelfHealth,data=d_ch )
d_ich$meanC<-scale(s1geSelfHealth_filtered$meanrawcodingspeed)
d_ich$diffC<-scale(s1geSelfHealth_filtered$diffrawcodingspeed)
d_ich$meanI<-scale(s1geSelfHealth_filtered$meanrawintelligence)
d_ich$diffI<-scale(s1geSelfHealth_filtered$diffrawintelligence)
d_ich$diffSelfHealth<-s1geSelfHealth_filtered$diffSelfHealth
d_ich$meanSelfHealth<-scale(s1geSelfHealth_filtered$meanSelfHealth)
md_ich <- lm( diffSelfHealth ~ meanI + diffI + meanC + diffC +meanSelfHealth,data=d_ich )
d_ih$meanI<-scale(s1geSelfHealth_filtered$meanrawintelligence)
d_ih$diffI<-scale(s1geSelfHealth_filtered$diffrawintelligence)
d_ih$diffSelfHealth<-s1geSelfHealth_filtered$diffSelfHealth
d_ih$meanSelfHealth<-scale(s1geSelfHealth_filtered$meanSelfHealth)
md_ih <- lm( diffSelfHealth ~ meanI + diffI + meanSelfHealth,data=d_ih )
d_mich$meanCommonVar<-scale(s1geSelfHealth_filtered$meanOverlapAv)
d_mich$diffCommonVar<-scale(s1geSelfHealth_filtered$diffOverlapAv)
d_mich$diffSelfHealth<-s1geSelfHealth_filtered$diffSelfHealth
d_mich$meanSelfHealth<-scale(s1geSelfHealth_filtered$meanSelfHealth)
md_mich <- lm( diffSelfHealth ~ meanCommonVar + diffCommonVar + meanSelfHealth,data=d_mich)
library(stargazer)
stargazer(md_iocoh, md_ioch, md_ich, md_mich, md_ih, md_ch, align=TRUE,intercept.bottom=FALSE, single.row=TRUE,
order=(c(3,5,7,2,4,6,8)),
covariate.labels=c("Diff Persistence", "Diff Intelligence","Diff Common Variance","Mean Persistence","Mean Intelligence","Mean Common Variance","Mean Health"), omit="Constant",
dep.var.labels=c("Difference in Health"),header=FALSE,omit.table.layout="m")
library(ggplot2)
library(gtable)
library(grid)
library(gridExtra)
grapheddiffrawintelligence<-abs(megafull$diffrawintelligence)
shading<-c("navy","dodgerblue4","dodgerblue2","lightskyblue" ,"dodgerblue2","dodgerblue4","navy")
##############
lm_eqn = function(df){
m = lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2, list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
megafull$y = scale(megafull$rawcodingspeed_S1)
megafull$x = scale(megafull$rawintelligence_S1)
eq=lm_eqn(megafull)
p<- ggplot(megafull, aes(y=rawcodingspeed_S1, x=rawintelligence_S1,colour=(diffrawintelligence))) +
geom_point( size =2,alpha = 1,na.rm=TRUE) +
scale_colour_gradientn(name="Sibling \nDifference",colours=shading)+
#scale_x_continuous(expand = c(0, 0)) +
#scale_y_continuous(expand = c(0, 0)) +
theme_bw() +   theme(axis.text=element_text(size=16),                                                                                                                                                                                  axis.title=element_text(size=16,face="bold"),
#),
#axis.text = element_blank(), # axis.title = element_blank(),
#axis.ticks =  element_blank(),
#   legend.position="none",
#axis.ticks.margin = unit(0, "lines"),
plot.title=element_text(size=16,face="bold"),
axis.ticks.length = unit(0, "cm"),
panel.background =element_blank())+
ylab("Coding Speed") +
xlab("AFQT Score") +
ggtitle("(A) Intelligence vs. Persistence")
CI = (p + geom_text(aes(y = 1.5, x = 85.1, label = "AFQT = .70 CS + e", parse= FALSE), colour = "black"))
png(filename=paste(file_drive,"/Dropbox/Work/Research/Projects/NLSY/SPSP15/ci.png",sep=""), width = 600, height = 500)
CI
#grid.arrange(Sibintel, Sibcs, ncol=2,heights=1, widths=c(1,.875))
dev.off()
library(ggplot2)
library(gtable)
library(grid)
grapheddiffrawintelligence<-abs(megafull$diffrawintelligence)
shading<-c("navy","dodgerblue4","dodgerblue2","lightskyblue" ,"dodgerblue2","dodgerblue4","navy")
bw<-ggplot(megafull, aes(y=grapheddiffrawintelligence, x=rankdiffrawintelligence)) + geom_point(,na.rm=TRUE) + theme_bw() +  theme(axis.text=element_text(size=16),                                                                                                                                                                                  axis.title=element_text(size=16,face="bold"), plot.title=element_text(size=16,face="bold"),
#axis.text = element_blank(), # axis.title = element_blank(),
#axis.ticks =  element_blank(),
#axis.ticks.margin = unit(0, "lines"),
axis.ticks.length = unit(0, "cm"),
panel.background =element_blank()) + coord_cartesian(xlim = c(Min(megafull$rankdiffrawintelligence)-150, 10000)) +
ylab("Difference in AFQT Score") +
xlab("Rank of Difference") +
ggtitle("(B) Sibling Differences in Intelligence")
bwh<-ggplot(megafull, aes(x=grapheddiffrawintelligence, y=rankdiffrawintelligence)) + geom_point(size=.8,na.rm=TRUE) + theme_bw() +  theme(axis.text=element_text(size=16),                                                                                                                                                                                  axis.title=element_text(size=16,face="bold"), plot.title=element_text(size=16,face="bold"),
#axis.text = element_blank(), # axis.title = element_blank(),
#axis.ticks =  element_blank(),
#axis.ticks.margin = unit(0, "lines"),
axis.ticks.length = unit(0, "cm"),
panel.background =element_blank()) + coord_cartesian(ylim = c(Min(megafull$rankdiffrawintelligence)-150, 10000)) +
xlab("Difference in AFQT Score") +
ylab("Rank of Difference") +
ggtitle("(B) Sibling Differences in Intelligence")
file <-na.omit(data.frame(grapheddiffrawintelligence,megafull$rankdiffrawintelligence))
y <- file$grapheddiffrawintelligence
x <- file$megafull.rankdiffrawintelligence
d.x <- density(x)
d.y <- density(y)
data<-data.frame(d.y$y,d.y$x)
side<-ggplot(data, aes(y=d.y.x, x=d.y.y)) + geom_path(size=1) + theme_bw() +  theme(
axis.text = element_blank(),  axis.title = element_blank(),
axis.ticks =  element_blank(),
axis.ticks.margin = unit(0, "lines"),
axis.ticks.length = unit(0, "cm"),
panel.background =element_blank(),
panel.grid=element_blank(), panel.border=element_blank())
top<-ggplot(megafull, aes(x=grapheddiffrawintelligence)) + geom_density() + theme_bw() +  theme(
axis.text = element_blank(),  #axis.title = element_blank(),
axis.ticks =  element_blank(),
axis.ticks.margin = unit(0, "lines"),
axis.ticks.length = unit(0, "cm"),
panel.background =element_blank(),
panel.grid=element_blank(), panel.border=element_blank())  +
xlab("Density of Sib Differences") +
ylab("") + theme(plot.margin = unit(c(.025,.05,.025,.025), "cm"))
library(gridExtra)
plot1 <- bw
plot2 <- side
png(filename=paste(file_drive,"/Dropbox/Work/Research/Projects/NLSY/SPSP15/bwv.png",sep=""),width = 550, height = 550)
grid.arrange(plot1, plot2, ncol=2,heights=1, widths=c(1,.5))
dev.off()
plot1 <- bwh
plot2 <- top
png(filename=paste(graphics_folder,"bwh.png",sep=""),width = 500, height = 320)
grid.arrange(plot2, plot1, ncol=1,heights=c(.33,1), widths=c(1,1),main=textGrob("AFQT", gp=gpar(fontsize=20)))
dev.off()
library(ggplot2)
library(gtable)
library(grid)
library(gridExtra)
grapheddiffrawintelligence<-abs(megafull$diffrawintelligence)
shading<-c("navy","dodgerblue4","dodgerblue2","lightskyblue" ,"dodgerblue2","dodgerblue4","navy")
##############
#Sibs on intell
lm_eqn = function(df){
m = lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2, list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
megafull$y = scale(megafull$rawintelligence_S2)
megafull$x = scale(megafull$rawintelligence_S1)
p<- ggplot(megafull, aes(y=rawintelligence_S2, x=rawintelligence_S1,colour=(diffrawintelligence))) +
geom_point( size =2,alpha = 1,na.rm=TRUE) +
scale_colour_gradientn(name="Sibling \nDifference",colours=shading)+
#scale_x_continuous(expand = c(0, 0)) +
#scale_y_continuous(expand = c(0, 0)) +
theme_bw() +  theme(axis.text=element_text(size=16),                                                                                                                                                                                  axis.title=element_text(size=16,face="bold"), plot.title=element_text(size=20,face="bold"),
#axis.text = element_blank(), # axis.title = element_blank(),
#axis.ticks =  element_blank(),
#axis.ticks.margin = unit(0, "lines"),
legend.position="none",
axis.ticks.length = unit(0, "cm"),
panel.background =element_blank())+
ylab("AFQT Score for Sib 2") +
xlab("AFQT Score for Sib 1") +
ggtitle("(C) Sibling Similarity on AFQT")
windowsFonts(Times=windowsFont("TT Times New Roman"))
Sibintel = p + geom_text(aes(y = 1.5, x = 91.1, label = "Sib1 = .66 Sib2 + e", parse= FALSE), colour = "black")
png(filename=paste(file_drive,"/Dropbox/Work/Research/Projects/NLSY/SPSP15/int.png",sep=""), width = 500, height = 500)
Sibintel
dev.off()
##################################
megafull$y = scale(megafull$rawcodingspeed_S2)
megafull$x = scale(megafull$rawcodingspeed_S1)
eq=lm_eqn(megafull)
p<- ggplot(megafull, aes(y=rawcodingspeed_S2, x=rawcodingspeed_S1,colour=(diffrawcodingspeed))) +
geom_point( size =2,alpha = 1,na.rm=TRUE) +
scale_colour_gradientn(colours=shading)+
#scale_x_continuous(expand = c(0, 0)) +
#scale_y_continuous(expand = c(0, 0)) +
theme_bw() +  theme(axis.text=element_text(size=16),                                                                                                                                                                                  axis.title=element_text(size=16,face="bold"), plot.title=element_text(size=16,face="bold"),
#axis.text = element_blank(), # axis.title = element_blank(),
#axis.ticks =  element_blank(),
#axis.ticks.margin = unit(0, "lines"),
axis.ticks.length = unit(0, "cm"),
legend.position="none",
panel.background =element_blank())+
ylab("CS Score for Sib 2") +
xlab("CS Score for Sib 1") +
ggtitle("(D) Sibling Similarity on Coding Speed")
Sibcs = (p + geom_text(aes(y = 1.5, x = 71.1, label = "Sib1 = .41 Sib2 + e", parse= FALSE),colour="black"))
png(filename=paste(file_drive,"/Dropbox/Work/Research/Projects/NLSY/SPSP15/cs.png",sep=""), width = 500, height = 500)
Sibcs
dev.off()
##################
png(filename=paste(graphics_folder,"/corih.png",sep=""), width = 1000, height = 500)
grid.arrange(Sibintel, Sibcs, ncol=2,heights=1, widths=c(1,1))
dev.off()
png(filename=paste((graphics_folder,"/coriv.png",sep=""), width = 500, height = 1000)
grid.arrange(Sibintel, Sibcs, ncol=1,heights=1, widths=c(1,1))
dev.off()
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 TITLE PAGE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\input{content/slides/Title.txt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                TABLE OF CONTENTS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\input{content/slides/Tableofcontents.txt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Definitions}
\input{content/slides/Defs.txt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                Theories
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Theories}
\input{content/slides/Model.txt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                Measurement Side Note
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Intelligence vs. Personality}
\subsection{Distinction}
\input{content/slides/distinction.txt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                Integration with Personality Theory
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Integration with Personality Theory}
\input{content/slides/personality.txt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                Application
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Application}
\subsection{Differential Epidemiology}
%\input{content/slides/diffepi.txt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 REFERENCES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\section{References}
\input{content/slides/References.txt}
\end{document}
